#!/usr/bin/env python

import json
import sys
from compiler.ast import flatten

def main():
    template = json.load(sys.stdin)

    (graph, edges) = extract_graph(template['Description'], template['Resources'])
    graph['edges'].extend(edges)

    for name, elem in [('Parameters', template['Parameters']), ('Outputs', template['Outputs'])]:
        (subgraph, edges) = extract_graph(name, elem)
        graph['subgraphs'].append(subgraph)
        graph['edges'].extend(edges)

    render(graph)

def extract_graph(name, elem):
    graph = {'name': name, 'nodes': [], 'edges': [], 'subgraphs': []}
    edges = []
    for item, details in elem.iteritems():
        graph['nodes'].append({'name': item, 'details': details.get('Type')})
        edges.extend(flatten(find_refs(item, details)))
    return (graph, edges)

def find_refs(context, elem):
    if isinstance(elem, dict):
        refs = []
        for k, v in elem.iteritems():
            if unicode(k) == unicode('Ref'):
                assert isinstance(v, basestring), 'Expected a string: %s' % v
                refs.append({'from': v, 'to': context})
            elif unicode(k) == unicode('Fn::GetAtt'):
                assert isinstance(v, list), 'Expected a list: %s' % v
                refs.append({'from': v[0], 'to': context})
            else:
                refs.extend(find_refs(context, v))
        return refs
    elif isinstance(elem, list):
        return map(lambda e: find_refs(context, e), elem)
    elif isinstance(elem, basestring):
        return []
    elif isinstance(elem, bool):
        return []
    else:
        raise AssertionError('Unexpected type: %s' % elem)

def render(graph, subgraph=False):
    graph_type, graph_name = None, None
    if subgraph:
        graph_type, graph_name = 'subgraph', 'cluster%s' % graph['name']
    else:
        graph_type, graph_name = 'digraph', graph['name']

    print '%s "%s" {' % (graph_type, graph_name)
    print 'labeljust=l;'
    print 'label="%s";' % graph['name']
    print 'node [shape=Mrecord];'
    for n in graph['nodes']:
        print '"%s" [label="{\N|%s}"];' % (n['name'], n['details'] or '')
    for e in graph['edges']:
        print '"%s" -> "%s";' % (e['from'], e['to'])
    for s in graph['subgraphs']:
        render(s, True)
    print '}'

def debug(*s):
    print >>sys.stderr, s

if __name__ == '__main__':
    main()
