#!/usr/bin/env python

import json
import sys
from compiler.ast import flatten

def main():
    template = json.load(sys.stdin)

    graph = {'nodes': [], 'edges': [], 'subgraphs': []}

    graph['name'] = template['Description']

    for resource, details in template['Resources'].iteritems():
        graph['nodes'].append({'name': resource, 'details': details['Type']})
        graph['edges'].extend(flatten(find_refs(resource, details)))

    parameters = {'name': 'Parameters', 'nodes': []}
    for parameter, details in template['Parameters'].iteritems():
        parameters['nodes'].append({'name': parameter, 'details': details['Description']})
    graph['subgraphs'].append(parameters)

    outputs = {'name': 'Outputs', 'nodes': []}
    for output, details in template['Outputs'].iteritems():
        outputs['nodes'].append({'name': output, 'details': details.get('Description')})
        graph['edges'].extend(flatten(find_refs(output, details)))
    graph['subgraphs'].append(outputs)

    render(graph)

def find_refs(context, elem):
    if isinstance(elem, dict):
        refs = []
        for k, v in elem.iteritems():
            if unicode(k) == unicode('Ref'):
                assert isinstance(v, basestring), 'Expected a string: %s' % v
                refs.append({'from': v, 'to': context})
            elif unicode(k) == unicode('Fn::GetAtt'):
                assert isinstance(v, list), 'Expected a list: %s' % v
                refs.append({'from': v[0], 'to': context})
            else:
                refs.extend(find_refs(context, v))
        return refs
    elif isinstance(elem, list):
        return map(lambda e: find_refs(context, e), elem)
    elif isinstance(elem, basestring):
        return []
    else:
        raise AssertionError('Unexpected type: %s' % elem)

def render(graph):
    print 'digraph "%s" {' % graph['name']
    print 'node [shape=Mrecord];'
    for n in graph['nodes']:
        print '"%s" [label="{\N|%s}"];' % (n['name'], n['details'])
    for e in graph['edges']:
        print '"%s" -> "%s"' % (e['from'], e['to'])
    for s in graph['subgraphs']:
        print 'subgraph clusterk%s {' % s['name']
        for n in s['nodes']:
            print '"%s" [label="{\N|%s}"];' % (n['name'], n['details'])
        print '}'
    print '}'

def debug(*s):
    print >>sys.stderr, s

if __name__ == '__main__':
    main()
